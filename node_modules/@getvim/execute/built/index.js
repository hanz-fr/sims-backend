"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var crypto_1 = require("crypto");
var util_1 = require("util");
var random = util_1.promisify(crypto_1.randomBytes);
function execute(command, options) {
    var env = options && options.env ? __assign(__assign({}, process.env), options.env) : process.env;
    return new Promise(function (resolve, reject) {
        var safeCommand = "set -euo pipefail\n" + command;
        child_process_1.exec(safeCommand, { shell: '/bin/bash', env: env }, function (error, stdout, stderr) {
            var formattedStdout = removeFinalNewline(stdout);
            if (error)
                reject(__assign(__assign({}, error), { stdout: formattedStdout, stderr: removeFinalNewline(stderr) }));
            else
                resolve(formattedStdout);
        });
    });
}
exports.execute = execute;
function pipe(command, options) {
    return function (stdIn) {
        return random(32)
            .then(function (randomId) { return randomId.toString('hex'); })
            .then(function (randomId) { return execute(command + " <<" + randomId + "\n" + stdIn + "\n" + randomId, options); });
    };
}
exports.pipe = pipe;
function removeFinalNewline(stdio) {
    return stdio.endsWith('\n') ? stdio.slice(0, -1) : stdio;
}
